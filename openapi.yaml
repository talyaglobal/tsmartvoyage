openapi: 3.0.3
info:
  title: TSmart Voyage API
  description: |
    Comprehensive API for luxury yacht charter management and booking system.
    
    ## Overview
    The TSmart Voyage API provides a complete solution for yacht charter operations, including:
    - User authentication and authorization
    - Yacht fleet management
    - Customer management
    - Charter booking and scheduling
    - Real-time availability checking
    
    ## Authentication
    This API uses JWT (JSON Web Tokens) for authentication. Include the token in the Authorization header:
    ```
    Authorization: Bearer <your_jwt_token>
    ```
    
    ## Rate Limiting
    - Authentication endpoints: 10 requests per 15 minutes
    - General API endpoints: 100 requests per 15 minutes
    - Rate limit headers are included in responses
    
    ## Error Handling
    All errors follow a consistent format with appropriate HTTP status codes and detailed error messages.
    
    ## Base URL
    Production: `https://api.tsmartvoyage.com`
    Staging: `https://staging-api.tsmartvoyage.com`
    
  version: 1.0.0
  contact:
    name: TSmart Voyage API Support
    email: api-support@tsmartvoyage.com
    url: https://docs.tsmartvoyage.com
  license:
    name: TSmart License
    url: https://tsmartvoyage.com/license

servers:
  - url: https://api.tsmartvoyage.com/api
    description: Production server
  - url: https://staging-api.tsmartvoyage.com/api
    description: Staging server
  - url: http://localhost:3000/api
    description: Development server

security:
  - BearerAuth: []

paths:
  /health:
    get:
      tags:
        - System
      summary: Health Check
      description: Check the health status of the API service
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register User
      description: Register a new user account
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login User
      description: Authenticate user and receive JWT token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /yachts:
    get:
      tags:
        - Yachts
      summary: List Yachts
      description: Retrieve a paginated list of yachts with optional filtering
      security: []
      parameters:
        - name: page
          in: query
          description: Page number (starts from 1)
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: isAvailable
          in: query
          description: Filter by availability status
          schema:
            type: boolean
        - name: location
          in: query
          description: Filter by location
          schema:
            type: string
        - name: minCapacity
          in: query
          description: Minimum guest capacity
          schema:
            type: integer
            minimum: 1
        - name: maxCapacity
          in: query
          description: Maximum guest capacity
          schema:
            type: integer
            minimum: 1
        - name: sortBy
          in: query
          description: Field to sort by
          schema:
            type: string
            enum: [name, price_per_day, capacity, created_at]
            default: created_at
        - name: sortOrder
          in: query
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: List of yachts retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/YachtListResponse'

    post:
      tags:
        - Yachts
      summary: Create Yacht
      description: Create a new yacht (Manager/Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateYachtRequest'
      responses:
        '201':
          description: Yacht created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/YachtResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /yachts/{id}:
    get:
      tags:
        - Yachts
      summary: Get Yacht
      description: Retrieve a specific yacht by ID
      security: []
      parameters:
        - name: id
          in: path
          required: true
          description: Yacht ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Yacht retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/YachtResponse'
        '404':
          description: Yacht not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Yachts
      summary: Update Yacht
      description: Update a yacht (Manager/Admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Yacht ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateYachtRequest'
      responses:
        '200':
          description: Yacht updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/YachtResponse'
        '404':
          description: Yacht not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Yachts
      summary: Delete Yacht
      description: Delete a yacht (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Yacht ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Yacht deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Cannot delete yacht with active charters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Yacht not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /charters:
    get:
      tags:
        - Charters
      summary: List Charters
      description: Retrieve charters (filtered by user role)
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: status
          in: query
          description: Filter by charter status
          schema:
            type: string
            enum: [PENDING, CONFIRMED, CANCELLED, COMPLETED]
        - name: yachtId
          in: query
          description: Filter by yacht ID
          schema:
            type: string
            format: uuid
        - name: customerId
          in: query
          description: Filter by customer ID
          schema:
            type: string
            format: uuid
        - name: startDate
          in: query
          description: Filter by start date (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: Filter by end date (ISO 8601)
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Charters retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CharterListResponse'

    post:
      tags:
        - Charters
      summary: Create Charter
      description: Create a new charter booking
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCharterRequest'
      responses:
        '201':
          description: Charter created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CharterResponse'
        '400':
          description: Invalid request or yacht not available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Base Response Schemas
    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        version:
          type: string
      required:
        - success
        - timestamp
        - version

    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            error:
              type: string
            data:
              type: object
              properties:
                errors:
                  type: array
                  items:
                    type: object
                    properties:
                      field:
                        type: string
                      message:
                        type: string

    SuccessResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: object

    PaginatedResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            pagination:
              type: object
              properties:
                page:
                  type: integer
                limit:
                  type: integer
                total:
                  type: integer
                totalPages:
                  type: integer
                hasNext:
                  type: boolean
                hasPrev:
                  type: boolean

    # Health Check
    HealthResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                status:
                  type: string
                  enum: [healthy, unhealthy]
                environment:
                  type: string
                uptime:
                  type: number
                memory:
                  type: object
                database:
                  type: object
                  properties:
                    connected:
                      type: boolean
                    type:
                      type: string

    # Authentication
    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        firstName:
          type: string
          minLength: 1
        lastName:
          type: string
          minLength: 1
        role:
          type: string
          enum: [USER, MANAGER, ADMIN]
          default: USER
      required:
        - email
        - password
        - firstName
        - lastName

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      required:
        - email
        - password

    AuthResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                token:
                  type: string
                user:
                  $ref: '#/components/schemas/User'

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum: [USER, MANAGER, ADMIN]

    # Yachts
    Yacht:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        type:
          type: string
        capacity:
          type: integer
          minimum: 1
        length:
          type: number
          minimum: 0
        year:
          type: integer
          minimum: 1900
        pricePerDay:
          type: number
          minimum: 0
        currency:
          type: string
          default: USD
        isAvailable:
          type: boolean
        features:
          type: array
          items:
            type: string
        images:
          type: array
          items:
            type: string
            format: uri
        location:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateYachtRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
        type:
          type: string
          minLength: 1
        capacity:
          type: integer
          minimum: 1
        length:
          type: number
          minimum: 0
        year:
          type: integer
          minimum: 1900
        pricePerDay:
          type: number
          minimum: 0
        currency:
          type: string
          default: USD
        features:
          type: array
          items:
            type: string
        images:
          type: array
          items:
            type: string
            format: uri
        location:
          type: string
          minLength: 1
      required:
        - name
        - type
        - capacity
        - length
        - year
        - pricePerDay
        - location

    UpdateYachtRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
        type:
          type: string
          minLength: 1
        capacity:
          type: integer
          minimum: 1
        length:
          type: number
          minimum: 0
        year:
          type: integer
          minimum: 1900
        pricePerDay:
          type: number
          minimum: 0
        currency:
          type: string
        isAvailable:
          type: boolean
        features:
          type: array
          items:
            type: string
        images:
          type: array
          items:
            type: string
            format: uri
        location:
          type: string
          minLength: 1

    YachtResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Yacht'

    YachtListResponse:
      allOf:
        - $ref: '#/components/schemas/PaginatedResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Yacht'

    # Charters
    Charter:
      type: object
      properties:
        id:
          type: string
          format: uuid
        yachtId:
          type: string
          format: uuid
        customerId:
          type: string
          format: uuid
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        totalPrice:
          type: number
          minimum: 0
        currency:
          type: string
        status:
          type: string
          enum: [PENDING, CONFIRMED, CANCELLED, COMPLETED]
        packageType:
          type: string
          enum: [ESSENTIAL, LUXURY, VIP]
        guestCount:
          type: integer
          minimum: 1
        specialRequests:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateCharterRequest:
      type: object
      properties:
        yachtId:
          type: string
          format: uuid
        customerId:
          type: string
          format: uuid
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        packageType:
          type: string
          enum: [ESSENTIAL, LUXURY, VIP]
        guestCount:
          type: integer
          minimum: 1
        specialRequests:
          type: string
      required:
        - yachtId
        - customerId
        - startDate
        - endDate
        - packageType
        - guestCount

    CharterResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Charter'

    CharterListResponse:
      allOf:
        - $ref: '#/components/schemas/PaginatedResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Charter'

tags:
  - name: System
    description: System health and monitoring endpoints
  - name: Authentication
    description: User authentication and authorization
  - name: Yachts
    description: Yacht fleet management operations
  - name: Charters
    description: Charter booking and management operations

